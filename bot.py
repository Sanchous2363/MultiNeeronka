from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup
import config
import gpt
from threading import Thread
bot = TeleBot(config.TOKEN)
MAX_LETTERS = config.MAX_TOKENS
import sqlite
import sqlite3
smiles = "üêçüìµü§ñüëæüëΩüëªüßû‚Äç‚ôÇÔ∏è‚Ñ¢üö©"

ai_desc = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫": ["–¢—ã –¥—Ä—É–∂—É–ª—é–±–Ω—ã–π –ø–æ–º–æ—à–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ –¥–∞–µ—à—å –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã", "–¢—ã –¥—Ä—É–∂—É–ª—é–±–Ω—ã–π –ø–æ–º–æ—à–Ω–∏–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ –¥–∞–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"],
    "–®–µ—Ñ–ø–æ–≤—Ä": ["–¢—ã –ø–æ–≤–æ—Ä, —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å –≤—Å–µ–º –ø—Ä–æ—Å—Ç—ã–º —Ä–µ—Ü–µ–ø—Ç–æ–º","–¢—ã –ø–æ–≤–æ—Ä, —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å –≤—Å–µ–º –ø—Ä–æ—Å—Ç—ã–º —Ä–µ—Ü–µ–ø—Ç–æ–º"],
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç": ["–¢—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å –≤—Å–µ–º —Å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–æ–¥–∞", "–¢—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å –≤—Å–µ–º —Å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º —Å–ª–æ–∂–Ω–æ–≥–æ –∫–æ–¥–∞"],
    "–ò—Å—Ç–æ—Ä–∏–∫": ["–¢—ã –∏—Å—Ç–æ—Ä–∏–∫ ,–æ—Ç–≤–µ—Ç–∏—à—å–Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –ª—é–±–æ–π –¥–∞—Ç–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å –æ –Ω–µ–π –∫–∞–∫ –º–∞–ª–µ–Ω—å–∫–æ–º—É —Ä–µ–±–µ–Ω–∫—É", "–¢—ã –∏—Å—Ç–æ—Ä–∏–∫ ,–æ—Ç–≤–µ—Ç–∏—à—å–Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –ª—é–±–æ–π –¥–∞—Ç–µ –∏ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å –æ –Ω–µ–π –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä—É"]
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω—É–∂–Ω—ã–º–∏ –∫–Ω–æ–ø–æ—á–∫–∞–º–∏
def create_keyboard(buttons_list):
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*buttons_list)
    return keyboard


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /start
@bot.message_handler(commands=['start'])
def start(message):
    id = message.chat.id
    user_name = message.from_user.first_name
    bot.send_message(message.chat.id,
                     text=f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ Python!üêçüìµ\n"
                          f"–¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —É—Å–ª–æ–≤–∏–µ  –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∏–ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –∫–æ–¥)ü§ñüëæ.\n"
                          "–ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–∞—é—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏ - –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                     reply_markup=create_keyboard(["/let`s_go", '/help', '/addition', '/stop']))
    connection = sqlite3.connect('users.db')
    cur = connection.cursor()
    sqlite.prepare_database()
    cur.execute(f"SELECT user_id FROM questions WHERE user_id = {id}")
    if cur.fetchone() is None:
        sqlite.start_regestration(message)

@bot.message_handler(commands=["let`s_go"])
def complexity(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)", reply_markup=create_keyboard(["/junior", "/senior"]))

@bot.message_handler(commands=["junior"])
def junior_roll(message):
    bot.send_message(message.chat.id, "–ü—Ä–æ—à—É –≤—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞:",
                     reply_markup=create_keyboard(["powar_chat", "IT_chat", "math_chat", "history_chat"]))

    bot.register_next_step_handler(message, get_answer_regulation_junior)

@bot.message_handler(commands=["senior"])
def senior_roll(message):
    bot.send_message(message.chat.id, "–ü—Ä–æ—à—É –≤—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞:",
                     reply_markup=create_keyboard(["powar_chat", "IT_chat", "math_chat", "history_chat"]))
    bot.register_next_step_handler(message, get_answer_regulation_senior)

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def support(message):
    bot.send_message(message.from_user.id,
                     text="–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏: –Ω–∞–∂–º–∏ /let`s_go, –≤—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –±–æ—Ç–∞, –∞ –∑–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏")
def get_answer_regulation_senior(message):
    id = message.from_user.id
    if message.text == "powar_chat":
        system_content_1 = ai_desc["–®–µ—Ñ–ø–æ–≤—Ä"][1]
    elif message.text == "IT_chat":
        system_content_1 = ai_desc["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"][1]
    elif message.text == "math_chat":
        system_content_1 = ai_desc["–ú–∞—Ç–µ–º–∞—Ç–∏–∫"][1]
    elif message.text == "history_chat":
        system_content_1 = ai_desc["–ò—Å—Ç–æ—Ä–∏–∫"][1]
    else:
        bot.send_message(message.chat.id, "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å–Ω–∞—á–∞–ª–∞ –≤–∏–¥–∏–º–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
    t1 = Thread(target=sqlite.neeronka_answers_regulation(system_content_1, id))
    t2 = Thread(target=bot.register_next_step_handler(message, create_promt_and_work))
    t1.start()
    t2.start()
    t1.join()
    t2.join()
def get_answer_regulation_junior(message):
    id = message.from_user.id
    if message.text == "powar_chat":
        system_content_1 = ai_desc["–®–µ—Ñ–ø–æ–≤—Ä"][0]
    elif message.text == "IT_chat":
        system_content_1 = ai_desc["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"][0]
    elif message.text == "math_chat":
        system_content_1 = ai_desc["–ú–∞—Ç–µ–º–∞—Ç–∏–∫"][0]
    elif message.text == "history_chat":
        system_content_1 = ai_desc["–ò—Å—Ç–æ—Ä–∏–∫"][0]
    else:
        bot.send_message(message.chat.id, "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å–Ω–∞—á–∞–ª–∞ –≤–∏–¥–∏–º–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
    t1 = Thread(target=sqlite.neeronka_answers_regulation(system_content_1, id))
    t2 = Thread(target=for_promt(message))
    t1.start()
    t2.start()
    t1.join()
    t2.join()

def create_promt_and_work(message):
    id = message.from_user.id
    promt = message.text
    user_id = message.from_user.id
    if message.content_type != "text":
        bot.send_message(message.chat.id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        bot.register_next_step_handler(message, create_promt_and_work)

    if len(message.text) > MAX_LETTERS:
        bot.send_message(user_id, "–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤\n–ò—Å–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å")
        bot.register_next_step_handler(message, create_promt_and_work)
    else:
        bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ–º—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω GPT, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!)")
        #sqlite.add_or_update_promt(promt, id)
        #bot.register_next_step_handler(message, gpt.GPT_message_generate)
        t1 = Thread(target=sqlite.add_or_update_promt(promt, id))
        t2 = Thread(target=gpt.GPT_message_generate(message))
        t1.start()
        t2.start()
        t1.join()
        t2.join()
@bot.message_handler(commands=['addition', "additio"])
def addition_prompt(message):
    id = message.chat.id
    connection = sqlite3.connect('users.db')
    cur = connection.cursor()
    results = cur.execute(f'SELECT answer FROM questions WHERE user_id = {id};')
    for res in results:
        task = res[0]
    if task != None or task != "":
        bot.send_message(message.chat.id, "P.s. –ï—Å–ª–∏ —á—Ç–æ, —è –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏! –ê —Ç–æ—á–Ω–µ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —è –∞–∫—Ç–∏–≤–Ω–æ –Ω–∞–¥ –Ω–∏–º —Ä–∞–±–æ—Ç–∞—é)")
        bot.register_next_step_handler(message, gpt.addition_GPT)
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–µ—Ä–æ—Å–µ—Ç–∏!\n –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞")
        bot.register_next_step_handler(message, for_promt)


@bot.message_handler(commands=["stop_gnenerate"])
def stop_generate(message):
    id = message.from_user.id
    gpt.error_or_stop(id)

def for_promt(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —É—Å–ª–æ–≤–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, create_promt_and_work)
bot.polling()
